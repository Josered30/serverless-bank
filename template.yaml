AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  bank

  Sample SAM Template for Bank app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: users
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  TransactionEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: transaction_events
      AttributeDefinitions:
        - AttributeName: source
          AttributeType: S
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: source
          KeyType: "HASH"
        - AttributeName: id
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        - IndexName: by-source
          KeySchema:
            - AttributeName: source
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

  ExecutePaymentFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: rust-cargolambda # More info about Cargo Lambda: https://github.com/cargo-lambda/cargo-lambda
    Properties:
      FunctionName: ExecutePaymentFunction
      CodeUri: ./functions/execute_payments # Points to dir of Cargo.toml
      Handler: bootstrap # Do not change, as this is the default executable name produced by Cargo Lambda
      Runtime: provided.al2023
      Role: !GetAtt ExecutePaymentLambdaRole.Arn
      Architectures:
        - arm64
      Environment:
        Variables:
          TRANSACTION_EVENT_TABLE_NAME: !GetAtt TransactionEventsTable.Arn
  
  RequestPaymentFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: rust-cargolambda # More info about Cargo Lambda: https://github.com/cargo-lambda/cargo-lambda
    Properties:
      FunctionName: RequestPaymentFunction
      CodeUri: ./functions/request_payments # Points to dir of Cargo.toml
      Handler: bootstrap # Do not change, as this is the default executable name produced by Cargo Lambda
      Runtime: provided.al2023
      Role: !GetAtt RequestPaymentLambdaRole.Arn
      Architectures:
        - arm64
      Environment:
        Variables:
          TRANSACTION_EVENT_TABLE_NAME: !GetAtt TransactionEventsTable.Arn

  ExecutePaymentSf:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: ExecutePaymentSf
      DefinitionSubstitutions:
        UserTableArn: !GetAtt UserTable.Arn
        ExecutePaymentLambdaArn: !GetAtt ExecutePaymentFunction.Arn
        RequestPaymentLambdaArn: !GetAtt RequestPaymentFunction.Arn
      DefinitionUri: statemachine/post_transaction.json
      Role: !GetAtt ExecutePaymentSfRole.Arn
      Type: EXPRESS
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt ExecutePaymentSfLogGroup.Arn
        IncludeExecutionData: true
        Level: "ALL"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /payments
            RestApiId: !Ref ExecutePaymentApi

  ExecutePaymentApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody: # an OpenApi definition
        "Fn::Transform":
          Name: "AWS::Include"
          Parameters:
            Location: "openapi/openapi.yml"
      OpenApiVersion: 3.0.0
      EndpointConfiguration:
        Type: REGIONAL
    DependsOn: ExecutePaymentSf

  ExecutePaymentSfLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: ExecutePaymentSfLogGroup

  ExecutePaymentSfRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /

  RestApiRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: AllowSFNExec
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "states:StartSyncExecution"
                Resource: !GetAtt ExecutePaymentSf.Arn

  ExecutePaymentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  RequestPaymentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  DynamoDBPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "DynamoDBPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "dynamodb:PutItem"
            Resource: !GetAtt TransactionEventsTable.Arn
          - Effect: Allow
            Action: "dynamodb:GetItem"
            Resource: !GetAtt UserTable.Arn
          - Effect: Allow
            Action: "dynamodb:Query"
            Resource: 
              - !GetAtt TransactionEventsTable.Arn
              - !Sub "${TransactionEventsTable.Arn}/index/*"
      Roles:
        - !Ref ExecutePaymentLambdaRole
        - !Ref RequestPaymentLambdaRole
        - !Ref ExecutePaymentSfRole

  InvokeLambdaPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "InvokeLambdaPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "lambda:InvokeFunction"
            Resource: 
              - !GetAtt ExecutePaymentFunction.Arn
              - !GetAtt RequestPaymentFunction.Arn
      Roles:
        - !Ref ExecutePaymentSfRole

  CloudWatchPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "CloudWatchPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - "cloudwatch:*"
              - "logs:CreateLogDelivery"
              - "logs:CreateLogStream"
              - "logs:GetLogDelivery"
              - "logs:UpdateLogDelivery"
              - "logs:DeleteLogDelivery"
              - "logs:ListLogDeliveries"
              - "logs:PutLogEvents"
              - "logs:PutResourcePolicy"
              - "logs:DescribeResourcePolicies"
              - "logs:DescribeLogGroups"
            Resource: "*"
      Roles:
        - !Ref ExecutePaymentSfRole
      
  ExecutePaymentRoleInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref ExecutePaymentLambdaRole
  
  RequestPaymentRoleInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref RequestPaymentLambdaRole

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ExecutePaymentFunctionOutput:
    Description: "Execute Payment Lambda Function ARN"
    Value: !GetAtt ExecutePaymentFunction.Arn
  RequestPaymentFunctionOutput:
    Description: "Request Payment Lambda Function ARN"
    Value: !GetAtt RequestPaymentFunction.Arn
  ExecutePaymentStepFunctionOutput:
    Description: "Execute Payment Step Function ARN"
    Value: !GetAtt ExecutePaymentSf.Arn
  ExecutePaymentIamRoleOutput:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt ExecutePaymentFunction.Arn
